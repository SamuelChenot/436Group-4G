-- MySQL Script generated by MySQL Workbench
-- Fri Apr 17 19:32:11 2020
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`Mountains`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Mountains` (
  `MID` TINYINT(1) NOT NULL,
  `Name` VARCHAR(50) NOT NULL,
  `Latitude` FLOAT NOT NULL,
  `Longitude` FLOAT NOT NULL,
  `SnowDate` INT NOT NULL COMMENT 'The most recent snow in the the area.',
  `SnowDepth` INT NOT NULL,
  PRIMARY KEY (`MID`),
  UNIQUE INDEX `Name_UNIQUE` (`Name` ASC) VISIBLE,)
  UNIQUE INDEX `MID_UNIQUE` (`MID` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`UserInfo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`UserInfo` (
  `UID` INT NOT NULL,
  `Latitude` FLOAT NOT NULL,
  `Longitude` FLOAT NOT NULL,
  PRIMARY KEY (`UID`),
  UNIQUE INDEX `UserID_UNIQUE` (`UID` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`HomeMT`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`HomeMT` (
  `UID` INT NOT NULL,
  `MID` TINYINT(1) NOT NULL,
  INDEX `fk_HomeMT_UserInfo1_idx` (`UID` ASC) VISIBLE,
  INDEX `fk_HomeMT_Mountains1_idx` (`MID` ASC) VISIBLE,
  CONSTRAINT `fk_HomeMT_UserInfo1`
    FOREIGN KEY (`UID`)
    REFERENCES `mydb`.`UserInfo` (`UID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_HomeMT_Mountains1`
    FOREIGN KEY (`MID`)
    REFERENCES `mydb`.`Mountains` (`MID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Daily`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Daily` (
  `MID` TINYINT(1) NOT NULL,
  `Day` TINYINT(1) NOT NULL,
  `sunriseTime` DOUBLE NOT NULL,
  `sunsetTime` DOUBLE NOT NULL,
  `precipIntensity` FLOAT NOT NULL,
  `precipIntensityMax` FLOAT NOT NULL,
  `precipProbability` FLOAT NOT NULL,
  `precipType` VARCHAR(10) NOT NULL,
  `temperatureHigh` FLOAT NOT NULL,
  `temperatureLow` FLOAT NOT NULL,
  `humidity` FLOAT NOT NULL,
  `windSpeed` FLOAT NOT NULL,
  `windGust` FLOAT NOT NULL,
  `windGustTime` DOUBLE NOT NULL,
  `windBearing` INT NOT NULL,
  `visibility` FLOAT NOT NULL,
  `predictedSnow` INT NOT NULL,
  INDEX `fk_Daily_Mountains1_idx` (`MID` ASC) VISIBLE,
  PRIMARY KEY (`Day`, `MID`),
  CONSTRAINT `fk_Daily_Mountains1`
    FOREIGN KEY (`MID`)
    REFERENCES `mydb`.`Mountains` (`MID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Hourly`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Hourly` (
  `MID` TINYINT(1) NOT NULL,
  `Hour` TINYINT(2) NOT NULL,
  `precipIntensity` FLOAT NOT NULL,
  `precipProbability` FLOAT NOT NULL,
  `precipType` VARCHAR(10) NOT NULL,
  `temperature` FLOAT NOT NULL,
  `apparentTemp` FLOAT NOT NULL,
  `humidity` FLOAT NOT NULL,
  `windSpeed` FLOAT NOT NULL,
  `windGust` FLOAT NOT NULL,
  `windBearing` INT NOT NULL,
  `cloudCover` FLOAT NOT NULL,
  `visibility` FLOAT NOT NULL,
  `predictedSnow` INT NOT NULL,
  INDEX `fk_Hourly_Mountains1_idx` (`MID` ASC) VISIBLE,
  PRIMARY KEY (`Hour`, `MID`),
  CONSTRAINT `fk_Hourly_Mountains1`
    FOREIGN KEY (`MID`)
    REFERENCES `mydb`.`Mountains` (`MID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `mydb` ;

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`SortLex`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`SortLex` (`MID` INT, `Day` INT, `sunriseTime` INT, `sunsetTime` INT, `precipIntensity` INT, `precipIntensityMax` INT, `precipProbability` INT, `precipType` INT, `temperatureHigh` INT, `temperatureLow` INT, `humidity` INT, `windSpeed` INT, `windGust` INT, `windGustTime` INT, `windBearing` INT, `visibility` INT, `predictedSnow` INT);

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`SortRecent`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`SortRecent` (`MID` INT, `Day` INT, `sunriseTime` INT, `sunsetTime` INT, `precipIntensity` INT, `precipIntensityMax` INT, `precipProbability` INT, `precipType` INT, `temperatureHigh` INT, `temperatureLow` INT, `humidity` INT, `windSpeed` INT, `windGust` INT, `windGustTime` INT, `windBearing` INT, `visibility` INT, `predictedSnow` INT);

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`SortDepth`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`SortDepth` (`MID` INT, `Day` INT, `sunriseTime` INT, `sunsetTime` INT, `precipIntensity` INT, `precipIntensityMax` INT, `precipProbability` INT, `precipType` INT, `temperatureHigh` INT, `temperatureLow` INT, `humidity` INT, `windSpeed` INT, `windGust` INT, `windGustTime` INT, `windBearing` INT, `visibility` INT, `predictedSnow` INT);

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`SortPredicted`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`SortPredicted` (`MID` INT, `Day` INT, `sunriseTime` INT, `sunsetTime` INT, `precipIntensity` INT, `precipIntensityMax` INT, `precipProbability` INT, `precipType` INT, `temperatureHigh` INT, `temperatureLow` INT, `humidity` INT, `windSpeed` INT, `windGust` INT, `windGustTime` INT, `windBearing` INT, `visibility` INT, `predictedSnow` INT);

-- -----------------------------------------------------
-- procedure createUser
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE `createUser` (
	IN Lat FLOAT,
    IN Lon FLOAT,
    OUT newID INT
)
BEGIN
	SET newID = 0;
	SELECT MAX(UID) INTO newID FROM UserInfo;
	INSERT INTO UserInfo(UID, Latitude, Longitude) VALUES (newID + 1, Lat, Lon);
	SELECT newID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure toggleHome
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE `toggleHome` (
	IN UserID INT,
    IN MntID INT
)
BEGIN
	DELETE FROM HomeMT WHERE UID = UserID AND MID = MntID;
    IF ROW_COUNT() = 0 THEN 
		INSERT INTO HomeMT(UID, MID) VALUES (UserID, MntID);
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getMountain
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE `getMountain` (
	IN MntID INT,
    IN Now INT
)
BEGIN
	SELECT * FROM Hourly
    WHERE MntID = MID 
	  AND Hour > Now 
	  AND Hour < (Now + 24)
    UNION
	SELECT * FROM  Daily WHERE MntID = MID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure searchDistance
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE `searchDistance` (
	IN UserID INT,
    IN Home BOOLEAN
)
BEGIN
	DECLARE baseLat, baseLon FLOAT DEFAULT 0;
	SELECT Latitude, Longitude INTO baseLat, baseLon FROM UserInfo WHERE UID = UserID;
    IF Home THEN
		SELECT *, Mountains.Latitude, Mountains.Longitude
        FROM Daily, Mountains
        WHERE Daily.Day = 0 AND Daily.MID IN
			(SELECT MID FROM HomeMT WHERE UID = UserID)
		ORDER BY (
			SQRT(POW( Latitude-baseLat, 2) + 
				 POW(Longitude-baseLon, 2))
		) ASC;
	ELSE
		SELECT *, Latitude, Longitude FROM Daily, Mountains WHERE Daily.Day = 0 
        ORDER BY (
            SQRT(POW( Latitude-baseLat, 2) + 
				 POW(Longitude-baseLon, 2))
		) ASC;
	END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure searchLex
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE `searchLex` (
	IN UserID INT,
    IN Home BOOLEAN
)
BEGIN
    IF Home THEN
		SELECT * FROM SortLex WHERE SortLex.MID IN
			(SELECT MID FROM HomeMT WHERE UID = UserID);
	ELSE
		SELECT * FROM SortLex;
	END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure searchRecent
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE `searchRecent` (
	IN UserID INT,
    IN Home BOOLEAN
)
BEGIN
    IF Home THEN
		SELECT * FROM SortRecent WHERE SortRecent.MID IN
			(SELECT MID FROM HomeMT WHERE UID = UserID);
	ELSE
		SELECT * FROM SortRecent;
	END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure searchDepth
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE `searchDepth` (
	IN UserID INT,
    IN Home BOOLEAN
)
BEGIN
    IF Home THEN
		SELECT * FROM SortDepth WHERE SortDepth.MID IN
			(SELECT MID FROM HomeMT WHERE UID = UserID);
	ELSE
		SELECT * FROM SortDepth;
	END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure searchPredicted
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE `searchPredicted` (
	IN UserID INT,
    IN Home BOOLEAN
)
BEGIN
    IF Home THEN
		SELECT * FROM SortPredicted WHERE SortPredicted.MID IN
			(SELECT MID FROM HomeMT WHERE UID = UserID);
	ELSE
		SELECT * FROM SortPredicted;
	END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure updateDatabase
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE `updateDatabase` ()
BEGIN
    LOAD DATA 
    INFILE 'C:\Users\User1\Documents\SQL\daily.csv' 
	REPLACE INTO TABLE Daily
	FIELDS TERMINATED BY ','
	ENCLOSED BY '"'
	LINES TERMINATED BY '\n';
    
    LOAD DATA
    INFILE 'C:\Users\User1\Documents\SQL\hourly.csv' 
	REPLACE INTO TABLE Hourly
	FIELDS TERMINATED BY ',' 
	ENCLOSED BY '"'
	LINES TERMINATED BY '\n';
    
    UPDATE Mountains
    SET SnowDate = 0,
		SnowDepth = SortLex.predictedSnow
	WHERE SortLex.predictedSnow > 0;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `mydb`.`SortLex`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`SortLex`;
USE `mydb`;
CREATE  OR REPLACE VIEW `SortLex` AS
	SELECT *
    FROM Daily WHERE Day = 0
    ORDER BY MID ASC;

-- -----------------------------------------------------
-- View `mydb`.`SortRecent`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`SortRecent`;
USE `mydb`;
CREATE  OR REPLACE VIEW `SortRecent` AS
	SELECT *
    FROM Daily JOIN Mountains.SnowDate ON Mountains.MID = Daily.MID
	WHERE Daily.Day = 0
    ORDER BY MID ASC;
    ORDER BY Mountains.SnowDate ASC;

-- -----------------------------------------------------
-- View `mydb`.`SortDepth`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`SortDepth`;
USE `mydb`;
CREATE  OR REPLACE VIEW `SortDepth` AS
	SELECT Daily.*
    FROM Daily JOIN Mountains.SnowDepth ON Mountains.MID = Daily.MID
	WHERE Daily.Day = 0
    ORDER BY MID ASC;
    ORDER BY Mountains.SnowDepth ASC;

-- -----------------------------------------------------
-- View `mydb`.`SortPredicted`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`SortPredicted`;
USE `mydb`;
CREATE  OR REPLACE VIEW `SortPredicted` AS
	SELECT *
    FROM Daily
	WHERE Daily = 0 
    ORDER BY MID ASC;
    ORDER BY predicted ASC;
CREATE USER 'Root' IDENTIFIED BY 'Joker';

GRANT ALL ON `mydb`.* TO 'Root';
GRANT SELECT, INSERT, TRIGGER, UPDATE, DELETE ON TABLE `mydb`.* TO 'Root';
GRANT EXECUTE ON ROUTINE `mydb`.* TO 'Root';
GRANT SELECT ON TABLE `mydb`.* TO 'Root';
GRANT SELECT, INSERT, TRIGGER ON TABLE `mydb`.* TO 'Root';
CREATE USER 'AllUsers';

GRANT SELECT, INSERT, TRIGGER ON TABLE `mydb`.* TO 'AllUsers';

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
